import random

import pygame as pg
import pygame_menu

pg.init()
W, H = 480, 640
display = pg.display.set_mode((W, H))
pg.display.set_caption('Game')

FPS = 60
V = 5
PLATFORM_WIDTH = 70

score = 0
font_name = pg.font.match_font('Comic Sans', True, False)
font = pg.font.Font(font_name, 36)
img_ninja = 'ninja.jpg.png'
img_enemy = 'enemy_ninja.png'
img_platform = 'platform.jpg'

class Sprite(pg.sprite.Sprite):
    def __init__(self, x, y, image_path):
        super().__init__()
        self.image = pg.image.load(image_path)
        self.rect = self.image.get_rect(topleft=(x, y))
        self.dead = False

    def update(self):
        super().update()

    def draw(self):
        display.blit(self.image, self.rect)

    def kill(self):
        self.dead = True
        super().kill()

def draw_text(text: str, x: int, y: int):
    score_text = font.render(text, True, (0, 0, 0))
    display.blit(score_text, (x, y))

class Player(Sprite):
    def __init__(self):
        super().__init__(W // 2, H //2, 'img_ninja')
        self.image_left = self.image
        self.image_right=pg.transform.flip(self.image, True, False)
        self.image_up = self.image
        self.image_down=pg.transform.flip(self.image, False, True)
        # self.rect = self.image.get_rect(center=(W // 2, H // 2))
        self.speed = 0

    def update(self):
        if self.dead:
            return
        if self.rect.y > H:
            self.kill()
        keys = pg.key.get_pressed()
        if keys[pg.K_LEFT]:
            self.rect.x -= V
            self.image = self.image_left
        if keys[pg.K_RIGHT]:
            self.rect.x += V
            self.image = self.image_right
        if keys[pg.K_UP]:
            self.rect.y += V
            self.image = self.image_up
        if keys[pg.K_DOWN]:
            self.rect.y += V
            self.image = self.image_down

        if self.rect.left > W:
            self.rect.left = 0
        if self.rect.right < 0:
            self.rect.right = W
        if self.rect.up > H:
            self.rect.up = 0
        if self.rect.down < 0:
            self.rect.down = H

    def draw(self):
        if self.rect.y > H:
            self.rect.y = H // 2
            # draw_text('Game Over', W // 2 - 30, H // 2 - 10)
        else:
            display.blit(self.image, self.rect)
        if self.dead: # if self.rect.y > H:
            # self.rect.y = H // 2
            draw_text('Game Over', W // 2 - 70, H // 2 - 10)
        else:
            display.blit(self.image, self.rect)

class Platform(Sprite):
    def __init__(self, x, y, sprite):
        img = pg.image.load('img_platform')
        w = img.get_width()
        h = img.get_height()
        rect = platform.rect
        self.x = random.randint(rect.left + w // 2, rect.right - w // 2)
        self.y = rect.top = h // 2
        super().__init__(W // 2, H// 2, 'img_platform')
        self.image = pg.image.load(sprite)
        self.rect = self.image.get_rect(topleft=(x, y))

class Enemy(Sprite):
    def __init__(self, x, y, img_path):
        img = pg.image.load('img_enemy')
        w = img.get_width()
        h = img.get_height()
        rect = platform.rect
        self.x = random.randint(rect.left + w // 2, rect.right - w // 2)
        self.y = rect.top = h // 2
        super().__init__(x, y, 'img_enemy')
        self.image = pg.image.load(img_path)
        self.rect = self.image.get_rect(topleft=(x, y))

    def update(self):
        if self.rect.x > W and self.rect.y > H:
            self.kill()
        if self.rect.x < 0 and self.rect.y < 0:
            self.kill()

    def on_collision(self, player):
        player.kill()

class Bonus(Sprite):
    def __init__(self, image_path, plat: 'Platform'):
        img = pg.image.load(image_path)
        w = img.get_width()
        h = img.get_height()
        rect = plat.rect
        x = random.randint(rect.left + w // 2, rect.right - w // 2)
        y = rect.top = h //2
        super().__init__(x, y, image_path)
        self.platform = plat
        self.dx = self.rect.x - self.platform.rect.x

    def on_collision(self, player):
        global score
        score += 1000
        self.kill()

    def update(self):
        self.rect.x = self.platform.rect.x + self.dx
        if self.platform.dead:
            self.kill()

platform = Platform()
player = Player()
enemy = Enemy()
bonus = Bonus()

enemies = pg.sprite.Group()
platforms = pg.sprite.Group()

def spawn_enemies(delay):
    if delay > 5000:
        delay = 0
        Enemy = random.choice([])
        x = random.randint(0, W - 80)
        e = Enemy(x, -H)
        enemies.add(e)
    return delay

def is_top_collision(player: Player, platform: Platform):
    if player.rect.colliderect(platform.rect):
        if player.speed > 0:
            if player.rect.bottom < platform.rect.bottom:
                platform.on_collision(player)

platform = Platform(W // 2 - PLATFORM_WIDTH // 2, H - 50)
platforms.add(platform)
pygame_menu = display.Menu()

def main():
    passed_time = 0
    while True:
        for e in pg.event.get():
            if e.type == pg.QUIT:
                return

        def show_end_screen():
            end_menu = pygame_menu.Menu('Игра окончена', 300, 400, theme=pygame_menu.themes.THEME_BLUE)
            end_menu.add.label(f'Всего очков: {score}', font_size=30)
            end_menu.add.button('Заного', main)
            end_menu.add.button('Выйти', pygame_menu.event.EXIT)
            end_menu.mainloop(display)

        def show_start_screen():
            menu = pygame_menu.Menu('Game', 300, 400, theme=pygame_menu.themes.THEME_BLUE)
            menu.add.button('Начать', main)
            menu.add.button('Выйти', pygame_menu.event.EXIT)
            menu.mainloop(display)

        enemies.update()
        hit_enemy = pg.sprite.spritecollide(player, enemies, False)
        if hit_enemy:  # 1
            player.kill()
        if pg.sprite.spritecollide(player, platforms, False):
            player.speed.update()
        pg.sprite.spritecollide(player, platforms, False, collided=is_top_collision)

        pg.display.update()
        pg.time.delay(FPS)
        platform.draw()
        player.draw()
        bonus.draw()
        enemies.draw(display)
        passed_time += pg.time.delay(FPS)

if __name__ == '__main__':
    main()
